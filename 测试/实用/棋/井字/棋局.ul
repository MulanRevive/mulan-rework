using Enum in enum

using 相等 in 测试.实用.通用.测试相关
using * in 测试.实用.棋.井字.模型

/* 不依赖 pygame, 易于测试 */

赢了 = 3

结语 = {
  状态.X胜: "X 赢了!",
  状态.O胜: "O 赢了!",
  状态.平局: "平了!"
}

type 步 {
  func $步(横, 纵, 棋手) {
    $横, $纵, $棋手 = 横, 纵, 棋手
  }

  func $棋手为X {
    return $棋手 == 棋手.X
  }

  operator == (另一子) {
    return $横 == 另一子.横 and $纵 == 另一子.纵 and $棋手 == 另一子.棋手
  }

  func __repr__(self) {
    return "(`$棋手`: (`$横`, `$纵`))"
  }
}

type 棋盘状况 {
  func $棋盘状况(格数) {
    $格数 = 格数
    $所有子 = []
    $进行状态 = 状态.对弈
    $当前棋手 = 棋手.X
  }

  func $落子(所在格) {
    横格, 纵格 = 所在格[0], 所在格[1]
    可落子 = $进行状态 == 状态.对弈 and $在棋盘内(横格, 纵格) and !$位置已占(横格, 纵格)
    if 可落子 {
      $所有子.append(步(横格, 纵格, $当前棋手))
      if $已赢() {
        $进行状态 = $当前棋手 == 棋手.X ? 状态.X胜 : 状态.O胜
      } elif len($所有子) == 9 {
        $进行状态 = 状态.平局
      } else {
        $当前棋手 = $当前棋手 == 棋手.X ? 棋手.O : 棋手.X
      }
    }
    return 可落子
  }

  func $位置已占(横格, 纵格) {
    return any(map(某子 -> 某子.横 == 横格 and 某子.纵 == 纵格, $所有子))
  }

  func $已赢 {
    return false if len($所有子) < 赢了
    获胜方式 = [
      [tuple(-1, 0), tuple(1, 0)],
      [tuple(0, -1), tuple(0, 1)],
      [tuple(-1, -1), tuple(1, 1)],
      [tuple(-1, 1), tuple(1, -1)]] //判断获胜的四个方向

    for 反向, 正向 in 获胜方式 {
      dx, dy = 反向
      反向方向个数 = $数子(dx, dy)
      dx, dy = 正向
      正向方向个数 = $数子(dx, dy)
      return true if 反向方向个数 + 正向方向个数 + 1 == 赢了
    }
    return false
  }

  func $数子(dx, dy) {
    末子 = $所有子[-1]
    tx, ty = 末子.横, 末子.纵
    个数 = 0
    loop {
      tx += dx
      ty += dy
      if $在棋盘内(tx, ty) and $所有子.__contains__(步(tx, ty, 末子.棋手)) {
        个数 += 1
      } else {
        return 个数
      }
    }
  }

  func $在棋盘内(横格, 纵格) {
    return 横格 >= 0 and 横格 < $格数 and 纵格 >= 0 and 纵格 < $格数
  }

  func $取结语 {
    return 结语[$进行状态]
  }

  func $结束 {
    return $进行状态 != 状态.对弈
  }
}

相等(false, [步(1, 1, 棋手.O)].__contains__(步(1, 1, 棋手.X)), "包含步")
相等(true, [步(1, 1, 棋手.O)].__contains__(步(1, 1, 棋手.O)), "包含步")

using pygame
using * in 测试.实用.棋.井字.棋局

// TODO: 与棋局冗余
格数 = 3

边框 = 60
格子尺寸 = 100
圆子半径 = 格子尺寸 / 2
棋盘内边长 = 格子尺寸 * 格数
棋盘尺寸 = 棋盘内边长 + 边框 * 2

线宽 = 5
黑色 = pygame.Color("black")

func 画格子(屏幕) {
  for x in 0..格数 {
    位置 = 格子尺寸 * x + 边框
    pygame.draw.line(屏幕, 黑色, tuple(位置, 边框), tuple(位置, 棋盘内边长 + 边框), 线宽)
    pygame.draw.line(屏幕, 黑色, tuple(边框, 位置), tuple(棋盘内边长 + 边框, 位置), 线宽)
  }
}

func 画棋子(屏幕, 落子) {
  横格, 纵格, 何方落子 = 落子.横, 落子.纵, 落子.棋手
  右x = (横格 + 1) * 格子尺寸 + 边框
  左x = 横格 * 格子尺寸 + 边框
  上y = (纵格 + 1) * 格子尺寸 + 边框
  下y = 纵格 * 格子尺寸 + 边框
  if 何方落子 == 棋手.X {
    pygame.draw.line(屏幕, 黑色, tuple(左x, 下y), tuple(右x, 上y), 8)
    pygame.draw.line(屏幕, 黑色, tuple(右x, 下y), tuple(左x, 上y), 8)
  } else {
    pygame.draw.circle(屏幕, 黑色, tuple(左x + 圆子半径, 下y + 圆子半径), 圆子半径, 线宽)
  }
}

func 鼠标位置所在格() {
  x, y = pygame.mouse.get_pos()
  横格 = int((x - 边框) * 1.0 / 格子尺寸)
  纵格 = int((y - 边框) * 1.0 / 格子尺寸)
  return 横格, 纵格
}
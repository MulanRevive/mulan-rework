/*
#!/usr/bin/env python
#
# Copyright 2009 Facebook
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
"""Simplified chat demo for websockets.

Authentication, error handling, etc are left as an exercise for the reader :)
"""

在原始 tornado 源码库例程基础上改为木兰实现
*/

using logging
using tornado.escape
using tornado.ioloop
using tornado.options
using tornado.web
using tornado.websocket
using os.path
using uuid

using define, options in tornado.options

// type 为语言关键词, 因而不可以作为函数形参的关键词
func 定义(名称 : str, 默认=nil, 类型=nil, 帮助=nil) {
  define(名称, 默认, 类型, 帮助)
}
定义("port", 默认=8888, 帮助="run on the given port", 类型=int)


type Application : tornado.web.Application {
  func $Application {
    handlers = [tuple("/", MainHandler),
        tuple("/chatsocket", ChatSocketHandler)]
    // TODO: 对应 python 的 super(), 需重现
    // 不支持 **?
    super.__init__(handlers,
        cookie_secret="__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__",
        template_path=os.path.join(os.path.dirname(__file__), "templates"),
        static_path=os.path.join(os.path.dirname(__file__), "static"),
        xsrf_cookies=true
    )
  }
}

type MainHandler : tornado.web.RequestHandler {
  func $get {
    $render("index.html", messages=ChatSocketHandler.cache)
  }
}

type ChatSocketHandler : tornado.websocket.WebSocketHandler {
  {
    waiters = set()
    cache = []
    cache_size = 200
  }

  func $get_compression_options {
    // Non-None enables compression with default options.
    return {:}
  }

  func $open {
    ChatSocketHandler.waiters.add($)
  }

  func $on_close {
    ChatSocketHandler.waiters.remove($)
  }

  // 不用 cls 形参
  func update_cache(chat) {
    // 必须指定类
    ChatSocketHandler.cache.append(chat)
    if len(ChatSocketHandler.cache) > ChatSocketHandler.cache_size {
      ChatSocketHandler.cache = ChatSocketHandler.cache[-ChatSocketHandler.cache_size :]
    }
  }

  func send_updates(chat) {
    logging.info("sending message to %d waiters", len(ChatSocketHandler.waiters))
    for waiter in ChatSocketHandler.waiters {
      //try:
      waiter.write_message(chat)
      //except:
      //    logging.error("Error sending message", exc_info=True)
    }
  }

  func $on_message(message) {
    logging.info("got message %r", message)
    parsed = tornado.escape.json_decode(message)
    chat = {"id": str(uuid.uuid4()), "body": parsed["body"]}
    chat["html"] = tornado.escape.to_basestring(
      $render_string("message.html", message=chat)
    )

    ChatSocketHandler.update_cache(chat)
    ChatSocketHandler.send_updates(chat)
  }
}

func main {
  tornado.options.parse_command_line()
  app = Application()
  app.listen(options.port)
  tornado.ioloop.IOLoop.current().start()
}

if __name__ == "__main__" {
  main()
}

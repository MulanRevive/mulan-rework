// [x, y]
全区域 = [
          [1, 3], [2, 3],
  [0, 2], [1, 2], [2, 2], [3, 2],
  [0, 1], [1, 1], [2, 1], [3, 1],
          [1, 0], [2, 0], [3, 0]
]

区域 = [
          [1, 3], [2, 3],
  [0, 2], [1, 2], [2, 2], [3, 2],
  /*[0, 1],*/ [1, 1], /*[2, 1],*/ [3, 1],
          [1, 0], /*[2, 0],*/ [3, 0] 
]

四格区域 = [
  [0, 1], [1, 1],
  [0, 0], [1, 0]
]

// 需记录占据情况 

func 在内(某形, 区域) {
  return all(map(点 -> 点在内(点, 区域), 某形))
}

// TODO: 与`在内`合并?
func 剩余(某形, 区域) {
  return list(filter(点 -> !点在内(点, 某形), 区域))
}

func 点在内(点, 区域) {
  return any(map(某点 -> 某点[0] == 点[0] and 某点[1] == 点[1], 区域))
}

func 获取所有旋转(初始形状) {
  所有形状 = [初始形状]
  转后形状 = 初始形状
  for 旋转次数 in 0..2 {
    转后形状 = 右旋90度(转后形状)
    所有形状.append(转后形状)
  }
  //print(所有形状)
  // 去重
  形状集合 = [初始形状]
  for 序号 in 1..<len(所有形状) {
    有重复 = false
    for 之前序号 in 0..<序号 {
      if 在内(所有形状[之前序号], 所有形状[序号]) {
        有重复 = true
        break
      }
    }
    if !有重复 {
      形状集合.append(所有形状[序号])
    }
  }
  return 形状集合
}

/* 仅处理横纵轴上的点 */
func 右旋90度(形状){
  新形状 = []
  for 点 in 形状 {
    新点 = []
    x, y = 点[0], 点[1]
    if x != 0 {
      新点 = [0, -x]
    } elif y != 0 {
      新点 = [y, 0]
    } else {
      新点 = [0, 0]
    }
    新形状.append(新点)
  }
  return 新形状
}

// TODO: 暂时全部手工列出. 以后改为旋转方法?
// [0, 0] 为中心，当前位置为 0，顺时针旋转 90 后为 1，依次为位置 2，3
长折 = 获取所有旋转([
    [0, 2],
    [0, 1],
    [0, 0], [1, 0]
  ])
/*
[
  [
    [0, 2],
    [0, 1],
    [0, 0], [1, 0]
  ],
  [
    [0, 0], [1, 0], [2, 0],
    [0, -1]
  ],
  [
    [-1, 0], [0, 0],
              [0, -1],
              [0, -2]
  ],
  [    
                    [0, 1],
    [-2, 0],[-1, 0], [0, 0]
  ]
]*/

短折 = 获取所有旋转([
    [0, 1],
    [0, 0], [1, 0]
  ])
/*
[
  [
    [0, 1],
    [0, 0], [1, 0]
  ],
  [
    [0, 0], [1, 0],
    [0, -1] 
  ],
  [
    [-1, 0], [0, 0],
            [0, -1]
  ],
  [
             [0, 1],
    [-1, 0], [0, 0]
  ]
]*/

一字 = 获取所有旋转([[-1, 0], [0, 0], [1, 0]])
/*
[
  [[-1, 0], [0, 0], [1, 0]],
  [
    [0, 1],
    [0, 0],
    [0, -1]
  ]
]*/

func 可能位置(形状, 区域) {
  所有位置 = []
  for 某形 in 形状 {
    for 定点 in 区域 {
      占位 = 取占位(定点, 某形)
      // 占位是否在区域内
      if 在内(占位, 区域) {
        所有位置.append([[某形, 定点], 剩余(占位, 区域)])
      } else {
        //println(定点)
      }
    }
  }
  return 所有位置
}

func 取所有摆放方法(区域, 形1, 形2, 形3) {
  所有位置 = []
  放形1 = 可能位置(形1, 区域)
  for 形1信息 in 放形1 {
    // println(形1信息)
    形1位置 = 形1信息[0]
    剩余区域 = 形1信息[1]
    放形2 = 可能位置(形2, 剩余区域)
    for 形2信息 in 放形2 {
      放形3 = 可能位置(形3, 形2信息[1])
      if len(放形3) > 0 {
        for 形3信息 in 放形3 {
          所有位置.append([形1位置 + 形2信息[0] + 形3信息[0], 形3信息[1]])
        }
      }
    }
  }
  return 所有位置
}

/*
    [0, 1],
    [0, 0], [1, 0]
    如果定点为 [1, 1]
    那么偏移后占位:
    [1, 2],
    [1, 1], [2, 1]
*/
func 取占位(定点, 某形) {
  横偏移 = 定点[0]
  纵偏移 = 定点[1]
  return list(map(块坐标 -> [块坐标[0] + 横偏移, 块坐标[1] + 纵偏移], 某形))
}

print(len(取所有摆放方法(全区域, 长折, 短折, 一字)))

// TODO: 暂不支持
// print([1, 2, 3, 4, 5][slice(1, 3)])

// TODO: 指定三个定点求解

/*
坐标1 = 试放(整片, 形1)
if 坐标1 {
  坐标2 = 试放(整片, 形2)
  if 坐标2 {
    坐标3 = 试放(整片, 形3)
  }
}
*/

// 测试

func 相等(目标, 实际, 信息) {
  值 = 实际
  if 值 != 目标 {
    println(信息 + "出错 -- 目标: " + str(目标) + ", 但实际为: " + str(值))
  }
}

相等(true, 点在内([1, 1], 四格区域), "点在内")
相等([
    [1, 2],
    [1, 1], [2, 1]
  ], 取占位([1, 1], 短折[0]), "取占位")
相等(true, 在内(取占位([0, 0], 短折[0]), 四格区域), "在内")
相等([[1, 1]], 剩余(取占位([0, 0], 短折[0]), 四格区域), "剩余")
相等(4, len(可能位置(短折, 四格区域)), "可能位置")

//print(右旋90度(短折[0]))
//print(获取所有旋转(一字[0]))
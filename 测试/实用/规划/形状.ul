// [x, y]
区域 = [
          [1, 3], [2, 3],
  [0, 2], [1, 2], [2, 2], [3, 2],
  [0, 1], [1, 1], [2, 1], [3, 1],
  [0, 0], [1, 0], [2, 0]
]

四格区域 = [
  [0, 1], [1, 1],
  [0, 0], [1, 0]
]

// 需记录占据情况 

// TODO: 暂时全部手工列出. 以后改为旋转方法?
// [0, 0] 为中心，当前位置为 0，顺时针旋转 90 后为 1，依次为位置 2，3
长折 = [
  [
    [0, 1],
    [0, 0], [1, 0], [2, 0]
  ],
  [
    [0, 0], [1, 0],
    [0, -1],
    [0, -2]
  ],
  [
    [-2, 0], [-1, 0], [0, 0],
                      [0, -1]
  ],
  [
            [0, 2],
            [0, 1],
    [-1, 0], [0, 0]
  ]
]

短折 = [
  [
    [0, 1],
    [0, 0], [1, 0]
  ],
  [
    [0, 0], [1, 0],
    [0, -1] 
  ],
  [
    [-1, 0], [0, 0],
            [0, -1]
  ],
  [
             [0, 1],
    [-1, 0], [0, 0]
  ]
]

一字 = [
  [[-1, 0], [0, 0], [1, 0]],
  [
    [0, 1],
    [0, 0],
    [0, -1]
  ]
]

func 可能位置(形状, 区域) {
  所有位置 = []
  for 某形 in 形状 {
    for 定点 in 区域 {
      占位 = 取占位(定点, 某形)
      // 占位是否在区域内
      if 在内(占位, 区域) {
        所有位置.append([[某形, 定点], 剩余(占位, 区域)])
      } else {
        //println(定点)
      }
    }
  }
  return 所有位置
}

func 取所有摆放方法(区域, 形1, 形2, 形3) {
  所有位置 = []
  放形1 = 可能位置(形1, 区域)
  for 形1信息 in 放形1 {
    // println(形1信息)
    形1位置 = 形1信息[0]
    剩余区域 = 形1信息[1]
    放形2 = 可能位置(形2, 剩余区域)
    for 形2信息 in 放形2 {
      放形3 = 可能位置(形3, 形2信息[1])
      if len(放形3) > 0 {
        for 形3信息 in 放形3 {
          所有位置.append([形1位置 + 形2信息[0] + 形3信息[0], 形3信息[1]])
        }
      }
    }
  }
  return 所有位置
}

/*
    [0, 1],
    [0, 0], [1, 0]
    如果定点为 [1, 1]
    那么偏移后占位:
    [1, 2],
    [1, 1], [2, 1]
*/
func 取占位(定点, 某形) {
  横偏移 = 定点[0]
  纵偏移 = 定点[1]
  return list(map(块坐标 -> [块坐标[0] + 横偏移, 块坐标[1] + 纵偏移], 某形))
}

func 在内(某形, 区域) {
  // TODO: 判断所有都在内
  都在内 = true
  for 点 in 某形 {
    if !点在内(点, 区域) {
      都在内 = false
      break
    }
  }
  return 都在内
}

// TODO: 与`在内`合并?
func 剩余(某形, 区域) {
  剩余区域 = []
  for 点 in 区域 {
    if !点在内(点, 某形) {
      剩余区域.append(点)
    }
  }
  return 剩余区域
}

func 点在内(点, 区域) {
  for 某点 in 区域 {
    if 某点[0] == 点[0] and 某点[1] == 点[1] {
      return true
    }
  }
  return false
}

// print(取占位([1, 1], 短折[0]))
//print(在内(取占位([1, 1], 短折[1]), 区域)) // true

//print(剩余(取占位([0, 0], 短折[0]), 四格区域))
//print(剩余(取占位([1, 1], 短折[1]), 四格区域))

// print(可能位置(短折, 四格区域))
print(len(取所有摆放方法(区域, 长折, 短折, 一字)))

// TODO: 暂不支持
// print([1, 2, 3, 4, 5][slice(1, 3)])

/*
坐标1 = 试放(整片, 形1)
if 坐标1 {
  坐标2 = 试放(整片, 形2)
  if 坐标2 {
    坐标3 = 试放(整片, 形3)
  }
}
*/
using 点 in 测试.实用.规划.点
using 相等 in 测试.实用.通用.测试相关

type 范围 {
  func $范围(所有坐标) {
    self.所有点 = list(map(坐标数组 -> 点(坐标数组[0], 坐标数组[1]), 所有坐标))
  }

  func 包含点(self, 点) {
    return any(map(某点 -> 某点 == 点, self.所有点))
  }

  func 未超出(self, 某范围) {
    return len(某范围.所有点) >= len(self.所有点) and
          all(map(某点 -> 某范围.包含点(某点), self.所有点))
  }

  /* 仅处理横纵轴上的点 */
  func 顺时针转90度(self) {
    return 范围(list(map(某点 -> [某点.纵, -某点.横], self.所有点)))
  }

  func 除去(self, 某块) {
    新范围 = 范围([])
    新范围.所有点 = list(filter(某点 -> !某块.包含点(某点), self.所有点))
    return 新范围
  }

  operator == (另一范围) {
    return len(另一范围.所有点) == len(self.所有点) and self.未超出(另一范围)
  }

  func __repr__(self) {
    return len(self.所有点) == 0 ? "空" : "点阵: " + " ".join(map(str, self.所有点))
  }
}

// [x, y]
// TODO: 改为 4x4 除去 3 个点
全区 = 范围([
          [1, 3], [2, 3],
  [0, 2], [1, 2], [2, 2], [3, 2],
  [0, 1], [1, 1], [2, 1], [3, 1],
          [1, 0], [2, 0], [3, 0]
])

部分区域 = 范围([
          [1, 3], [2, 3],
  [0, 2], [1, 2], [2, 2], [3, 2],
  /*[0, 1],*/ [1, 1], /*[2, 1],*/ [3, 1],
          [1, 0], /*[2, 0],*/ [3, 0]
])

// TODO: 简化 axa 方格的创建
二乘二 = 范围([
  [0, 1], [1, 1],
  [0, 0], [1, 0]
])

三格 = 范围([[-1, 0], [0, 0], [1, 0]])

// [0, 0] 为中心，其他为相对坐标。按照实际形状进行排列，以便阅读。
长折 = 范围([
    [0, 2],
    [0, 1],
    [0, 0], [1, 0]
  ])

短折 = 范围([
    [0, 1],
    [0, 0], [1, 0]
  ])

一字 = 范围([[-1, 0], [0, 0], [1, 0]])

相等(true, 二乘二.包含点(点(1, 1)), "包含点")

相等(范围([
      [0, 0], [1, 0],
      [0, -1]
    ]), 短折.顺时针转90度(), "右旋90度")

相等(true, 短折.未超出(二乘二), "未超出")

相等(范围([[1, 1]]), 二乘二.除去(短折), "除去")

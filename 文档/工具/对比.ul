using re

源数据 = open("文档/工具/语法部分.md", 'rt', encoding="utf-8")
文档各行 = 源数据.read().split("\n")
源数据.close()
文档规则 = []
for 行 in 文档各行 {
  if re.match("^\s*$", 行) {
    continue
  }
  字段 = 行.split(" : ")
  if #字段 > 1 {
    成分全文 = 字段[-1]
  }

  字段 = 行.split("| ")
  if #字段 > 1 {
    成分全文 = 字段[-1]
  }

  注释匹配 = re.match("(.*)\/\/.*", 成分全文)
  if 注释匹配 {
    成分全文 = 注释匹配.group(1)
  }

  // println(成分全文)
  文档规则.append(成分全文.strip())  // 去掉首尾空格
}
println(#文档规则)

源数据 = open("木兰/分析器/语法分析器.py", 'rt', encoding="utf-8")
代码各行 = 源数据.read().split("\n")
源数据.close()

代码规则 = []
for 行 in 代码各行 {
  匹配 = re.match("\s*@分析器母机.语法规则\(语法\.(.+)\.成分\((.*)\)\)\s*", 行)
  if 匹配 {
    // println(匹配.group(1) + ' -> ' + 匹配.group(2))
    代码规则文本 = ""
    各成分 = list(map(成分 -> 成分.replace("语法.", ""), 匹配.group(2).split(', ')))
    代码规则.append(" ".join(各成分))
  }
}
println(#代码规则)

// 确认每条代码规则都在文档中有相应条目, 尚不确保没有多余
for 规则 in 代码规则 {
  if !文档规则.__contains__(规则) {
    println(规则)
  }
}


// 应变属性  名词_应变属性, 标识符, 语法.块

// 文档中, 有 262 条规则
// 代码中有 258条, 成分不为空有 252, 为空有 6
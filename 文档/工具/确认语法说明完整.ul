using re

源数据 = open("文档/语法说明.md", 'rt', encoding="utf-8")
匹配 = re.search(3"`" + "\n(.*)\n" + 3"`", 源数据.read(), re.DOTALL)
文档各行 = 匹配 ? 匹配.group(1).split("\n") : []
文档规则 = []
for 行 in 文档各行 {
  if re.match("^\s*$", 行) {
    continue
  }
  字段 = 行.split(" : ")
  if #字段 > 1 {
    成分全文 = 字段[-1]
  }

  字段 = 行.split("| ")
  if #字段 > 1 {
    成分全文 = 字段[-1]
  }

  注释匹配 = re.match("(.*)\/\/.*", 成分全文)

  if 注释匹配 {
    成分全文 = 注释匹配.group(1)
  }

  文档规则.append(成分全文.strip())  // 去掉首尾空格
}
println("文档规则数: `#文档规则`")

源数据 = open("木兰/分析器/语法分析器.py", 'rt', encoding="utf-8")
代码各行 = 源数据.read().split("\n")
源数据.close()

代码规则 = []
for 行 in 代码各行 {
  // 末个 .* 为优先级参数部分
  匹配 = re.match("\s*@分析器母机.语法规则\(语法\..+\.成分\((.*)\).*\)\s*", 行)
  if 匹配 {
    代码规则文本 = ""
    各成分 = list(map(成分 -> 成分.replace("语法.", ""), 匹配.group(1).split(', ')))
    此规则 = " ".join(各成分)
    代码规则.append(此规则)
  }
}
println("代码规则数: `#代码规则`")

println("代码有而文档无:\n" +
  "\n".join(list(filter(规则 -> !文档规则.__contains__(规则), 代码规则))))

println("文档有而代码无:\n" +
  "\n".join(list(filter(规则 -> !代码规则.__contains__(规则), 文档规则))))


using datetime
using logging
using uuid
using tornado.escape
using tornado.websocket
using SessionMixin in tornado_sqlalchemy

using 过往请求 in 编辑器.过往请求
using 读文件内容, 保存文件 in 编辑器.笔谈
using 运行木兰代码 in 编辑器.运行木兰

type 聊天渠道 : SessionMixin, tornado.websocket.WebSocketHandler {

  func $on_message(内容) {
    logging.info("收到消息: %r", 内容)
    请求 = tornado.escape.json_decode(内容)["请求内容"]
    输入 = $包装(请求, "要求")

    $write_message(输入)
    logging.info(请求)

    try 会话=self.make_session() {
        会话.add(过往请求(时间=datetime.datetime.now(), 请求=请求))
    }

    分词 = 请求.split(" ")
    if len(分词) == 2 {
      命令 = 分词[0]
      文件 = 分词[1]
      if 命令 == "打开" {
        源码 = 读文件内容(文件)
        // TODO: 同时返回语法信息?
        $write_message($包装(源码, "编辑器"))
        // TODO: 如果读文件出错, 反馈信息
        $write_message($包装("打开完成", "反馈"))
      } elif 命令 == "运行" {
        $write_message($包装(运行木兰代码(文件), "反馈"))
      } elif 命令 == "保存" {
        源码 = tornado.escape.json_decode(内容)["编辑器内容"]
        保存文件(文件, 源码)
        // TODO: 检查保存状态
        $write_message($包装("保存完成", "反馈"))
      }
      // TODO: 添加代码格式化
    } else {
      $write_message($包装("不懂", "反馈"))
    }

  }

  func $包装(字符串, 类型) {
    消息 = {"id": str(uuid.uuid4()), "类型": 类型, "内容": 字符串}
    消息["html"] = tornado.escape.to_basestring(
      $render_string("消息.html", 语句=消息)
    )
    return 消息
  }
}

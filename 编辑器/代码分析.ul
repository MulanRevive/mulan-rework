
using * in 分析器.词法分析器
using 代码段 in 编辑器.代码段
using * in 编辑器.常量
using 按某项生成映射 in 测试.实用.通用.结构

func 解析(源码) {
  各词 = 分词器.lex(源码)

  各代码段 = list(map(词 -> {
    行号 = 词.getsourcepos().lineno
    列号 = 词.getsourcepos().colno - 1
    内容 = 词.getstr()
    词长 = len(内容)
    词性 = 词.name
    if 词性 == 标识符 {
      if 内置函数表.__contains__(内容) {
        词性 = 内置函数
      } elif 内置类型表.__contains__(内容) {
        词性 = 内置类型
      } elif 内容 == 自身 {
        词性 = 自身
      }
    }
    return 代码段(词性, 行号, 列号, 列号 + 词长)
  }, 各词))
  各行代码段 = 按某项生成映射(各代码段, 段 -> 段.行, 段 -> 段)

  所有行 = 源码.splitlines()
  for 索引 in range(len(所有行)) {
    行号 = 索引 + 1
    列号 = 0
    // 取本行所有代码段, 将跳过部分全部置为注释 TODO: 保险起见最好再次检查是否为注释
    if 各行代码段.__contains__(行号) {
      本行代码段 = 各行代码段.get(行号)
      for 段 in 本行代码段 {
        if 段.起 > 列号 + 1 {
          各代码段.append(代码段(注释, 行号, 列号, 段.起))
        }
        列号 = 段.止
      }
    }

    if 列号 < len(所有行[索引]) {
      各代码段.append(代码段(注释, 行号, 列号, len(所有行[索引])))
    }
  }
  return 各代码段
}

// TODO: 格式化() 逐行代码段分析，数每行未配对 {}，决定每行开头多少空格

using DeepDiff in deepdiff
using Path in pathlib
using json

func 读取(文件名) {
  try 文件 = open(文件名, 'r', encoding="utf-8") { return json.load(文件) }
}

旧行数, 新行数 = 读取('临时/行数统计_0718.json'), 读取('临时/行数统计_0725.json')

func 取总行数(各文件行数) {
  各类型行数 = {'py':0, 'ul':0}
  for 文件名 in 各文件行数 {
    各类型行数[文件名[-2:]] += 各文件行数[文件名]
  }
  return 各类型行数
}

func 取目录下行数(各文件行数, 目录, 类型) {
  行数 = 0
  for 文件路径 in 各文件行数 {
    if 目录 == 文件路径[:文件路径.find('/')] and 文件路径[-2:] == 类型 {
      行数 += 各文件行数[文件路径] 
    }
  }
  return 行数
}

旧总行数, 新总行数 = 取总行数(旧行数), 取总行数(新行数)

println('-----------\n\n### ***附：[木兰重现项目](https://gitee.com/MulanRevive/mulan-rework) 代码量统计***\n\n主要部分的代码行数统计与修改之处：上次->现在。')
println('- 木兰 `旧总行数["ul"]` -> `新总行数["ul"]`')

编辑器旧行数, 编辑器新行数 = 取目录下行数(旧行数, '编辑器', 'ul'), 取目录下行数(新行数, '编辑器', 'ul')
println('  - 木兰测试用例、一些实用小程序如井字棋：' + str(旧总行数["ul"] - 编辑器旧行数) + ' -> ' + str(新总行数["ul"] - 编辑器新行数))
println('  - 运行环境、行数统计：' + str(编辑器旧行数) + ' -> ' + str(编辑器新行数))

println('- Python（实现、测试框架，py转木兰的测试用例） `旧总行数["py"]` -> `新总行数["py"]`')

差异概要 = DeepDiff(旧行数, 新行数)
所有新添 = list(map(n->str(n), 差异概要['dictionary_item_added']))
所有修改 = list(差异概要['values_changed'])

所有差异 = list(filter(路径 -> 路径[-4:-2] == 'py', 所有新添 + 所有修改))
所有差异.sort(key=路径 -> -新行数[路径[6:-2]])

for 原始文件路径 in 所有差异 {
  文件路径 = 原始文件路径[6:-2]
  print('  - `文件路径`：')
  println(旧行数.__contains__(文件路径) ? '`旧行数[文件路径]` -> `新行数[文件路径]`' : '`新行数[文件路径]`')
}
